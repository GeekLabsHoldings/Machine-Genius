"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
require("./Table.scss");
var _IconButton = _interopRequireDefault(require("./IconButton"));
var _Flex = _interopRequireDefault(require("./Flex"));
var _Input = _interopRequireDefault(require("./Input"));
var _Checkbox = _interopRequireDefault(require("./Checkbox"));
var _sebikostudioIcons = require("sebikostudio-icons");
var _Paragraph = _interopRequireDefault(require("./Paragraph"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
var Table = function Table(_ref) {
  var columns = _ref.columns,
    data = _ref.data,
    pageSize = _ref.pageSize,
    onRowClick = _ref.onRowClick,
    multiSelect = _ref.multiSelect,
    onMultiSelect = _ref.onMultiSelect,
    _ref$maxPagination = _ref.maxPagination,
    maxPagination = _ref$maxPagination === void 0 ? 3 : _ref$maxPagination,
    fluid = _ref.fluid,
    search = _ref.search,
    fullBorder = _ref.fullBorder,
    sorting = _ref.sorting,
    _ref$cellAlign = _ref.cellAlign,
    cellAlign = _ref$cellAlign === void 0 ? "start" : _ref$cellAlign,
    large = _ref.large;
  var _useState = (0, _react.useState)(1),
    _useState2 = _slicedToArray(_useState, 2),
    currentPage = _useState2[0],
    setCurrentPage = _useState2[1];
  var _useState3 = (0, _react.useState)(""),
    _useState4 = _slicedToArray(_useState3, 2),
    filter = _useState4[0],
    setFilter = _useState4[1];
  var _useState5 = (0, _react.useState)(new Set()),
    _useState6 = _slicedToArray(_useState5, 2),
    selectedRows = _useState6[0],
    setSelectedRows = _useState6[1];
  var _useState7 = (0, _react.useState)({
      key: null,
      direction: null,
      sorted: false
    }),
    _useState8 = _slicedToArray(_useState7, 2),
    sortConfig = _useState8[0],
    setSortConfig = _useState8[1];
  var tableRef = (0, _react.useRef)(null);
  (0, _react.useEffect)(function () {
    var handleKeyDown = function handleKeyDown(event) {
      var activeElement = document.activeElement;
      var key = event.key;
      if (!tableRef.current || !activeElement) {
        return;
      }
      if (key === "Enter" || key === " ") {
        var clickableElement = activeElement.querySelector('button, input[type="checkbox"]');
        if (clickableElement) {
          clickableElement.click();
          event.preventDefault();
          return;
        }
      }
      if (!["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight"].includes(key)) {
        return;
      }
      var focusableElements = Array.from(tableRef.current.querySelectorAll("th, td")).filter(function (el) {
        return el.tabIndex >= 0;
      });
      var currentIndex = focusableElements.indexOf(activeElement);
      var nextIndex;
      switch (key) {
        case "ArrowUp":
          nextIndex = currentIndex - columns.length;
          break;
        case "ArrowDown":
          nextIndex = currentIndex + columns.length;
          break;
        case "ArrowLeft":
          nextIndex = currentIndex - 1;
          break;
        case "ArrowRight":
          nextIndex = currentIndex + 1;
          break;
        default:
          return;
      }
      if (nextIndex >= 0 && nextIndex < focusableElements.length) {
        focusableElements[nextIndex].focus();
        event.preventDefault();
      }
    };
    var tableElement = tableRef.current;
    tableElement.addEventListener("keydown", handleKeyDown);
    return function () {
      return tableElement.removeEventListener("keydown", handleKeyDown);
    };
  }, [columns.length]);
  var handleSelectAll = function handleSelectAll(checked) {
    var allRowIndices = sortedData.map(function (_, index) {
      return (currentPage - 1) * pageSize + index;
    });
    var newSelectedRows = checked ? new Set(allRowIndices) : new Set();
    setSelectedRows(newSelectedRows);
    if (onMultiSelect) {
      onMultiSelect(checked ? sortedData : []);
    }
  };
  var handleSelectRow = function handleSelectRow(checked, globalRowIndex) {
    var newSelectedRows = new Set(selectedRows);
    if (checked) {
      newSelectedRows.add(globalRowIndex);
    } else {
      newSelectedRows["delete"](globalRowIndex);
    }
    setSelectedRows(newSelectedRows);
    if (onMultiSelect) {
      var selectedData = Array.from(newSelectedRows).map(function (index) {
        return sortedData[index];
      });
      onMultiSelect(selectedData);
    }
  };
  var filteredData = data.filter(function (row) {
    return columns.some(function (column) {
      var cellValue = row[column.accessor];
      return typeof cellValue === "string" && cellValue.toLowerCase().includes(filter.toLowerCase());
    });
  });
  var isSortable = function isSortable(accessor) {
    return data.some(function (row) {
      return typeof row[accessor] === "string" || typeof row[accessor] === "number";
    });
  };
  var handleSort = function handleSort(accessor) {
    if (!sorting || !isSortable(accessor)) return;
    var direction = "ascending";
    var sorted = true;
    if (sortConfig && sortConfig.key === accessor) {
      if (sortConfig.direction === "ascending") {
        direction = "descending";
      } else {
        sorted = false; // Reset sorting if already sorted in descending order
      }
    }
    setSortConfig({
      key: accessor,
      direction: direction,
      sorted: sorted
    });
  };
  var sortedData = (0, _react.useMemo)(function () {
    var sortableItems = _toConsumableArray(filteredData);
    if (sortConfig !== null) {
      sortableItems.sort(function (a, b) {
        if (a[sortConfig.key] < b[sortConfig.key]) {
          return sortConfig.direction === "ascending" ? -1 : 1;
        }
        if (a[sortConfig.key] > b[sortConfig.key]) {
          return sortConfig.direction === "ascending" ? 1 : -1;
        }
        return 0;
      });
    }
    return sortableItems;
  }, [filteredData, sortConfig]);
  var paginatedData = sortedData.slice((currentPage - 1) * pageSize, currentPage * pageSize);
  var handlePageChange = function handlePageChange(page) {
    setCurrentPage(page);
  };
  var handleFilterChange = function handleFilterChange(event) {
    setFilter(event.target.value);
    setCurrentPage(1);
  };
  var totalNumberOfPages = Math.ceil(sortedData.length / pageSize);
  var paginationItems = Array.from({
    length: totalNumberOfPages
  }, function (_, i) {
    return i + 1;
  });
  var renderPagination = function renderPagination() {
    if (totalNumberOfPages === 1) {
      return null; // Hide pagination if there's only one page
    }
    var visiblePages = paginationItems;
    if (totalNumberOfPages > maxPagination) {
      var startPage = Math.max(1, currentPage - Math.floor(maxPagination / 2));
      var endPage = Math.min(totalNumberOfPages, startPage + maxPagination - 1);
      visiblePages = paginationItems.slice(startPage - 1, endPage);
      if (startPage > 1) {
        visiblePages.unshift(1);
      }
      if (endPage < totalNumberOfPages) {
        visiblePages.push(totalNumberOfPages);
      }
    }
    return visiblePages.map(function (page) {
      if (page === "...") {
        return /*#__PURE__*/_react["default"].createElement("span", {
          key: page,
          className: "pagination-ellipsis"
        }, page);
      } else {
        return /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
          key: page,
          size: "small",
          variant: "outline",
          onClick: function onClick() {
            return handlePageChange(page);
          },
          className: currentPage === page ? "active" : "",
          "aria-pressed": currentPage === page ? "true" : undefined
        }, page);
      }
    });
  };
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: "TableComponent ".concat(fluid ? "fluid" : "")
  }, search && /*#__PURE__*/_react["default"].createElement(_Flex["default"], {
    fluid: true,
    customClass: "TableSearch ".concat(large ? "large" : ""),
    style: {
      marginBottom: "var(--size-200)",
      boxSizing: "border-box"
    }
  }, /*#__PURE__*/_react["default"].createElement(_Input["default"], {
    type: "search",
    value: filter,
    label: "Filter",
    onChange: handleFilterChange,
    placeholder: "Filter...",
    validation: false,
    fluid: true
  })), /*#__PURE__*/_react["default"].createElement("table", {
    ref: tableRef,
    className: "TableComponent ".concat(cellAlign === "start" ? "align-start" : cellAlign === "end" ? "align-end" : "align-center", " ").concat(fullBorder ? "fullBorder" : "", " ").concat(large ? "large" : "", " ").concat(fluid ? "fluid" : "", " ").concat(multiSelect ? "hoverable" : ""),
    tabIndex: "0"
  }, /*#__PURE__*/_react["default"].createElement("thead", null, /*#__PURE__*/_react["default"].createElement("tr", null, multiSelect && /*#__PURE__*/_react["default"].createElement("th", {
    tabIndex: "0",
    style: {
      width: "26px"
    }
  }, /*#__PURE__*/_react["default"].createElement(_Checkbox["default"], {
    checked: selectedRows.size === sortedData.length && sortedData.length > 0,
    onChange: function onChange(checked) {
      return handleSelectAll(checked);
    }
  })), columns.map(function (column) {
    return /*#__PURE__*/_react["default"].createElement("th", {
      key: column.accessor,
      onClick: function onClick() {
        return handleSort(column.accessor);
      },
      className: "".concat(sorting && isSortable(column.accessor) ? "sortable" : "", " ").concat(sorting ? "hoverable" : ""),
      tabIndex: "0",
      style: {
        width: column.maxWidth
      }
    }, column.Header, sorting && isSortable(column.accessor) && /*#__PURE__*/_react["default"].createElement("span", {
      className: "sort-indicator"
    }, sortConfig.key === column.accessor && sortConfig.sorted ? sortConfig.direction === "ascending" ? /*#__PURE__*/_react["default"].createElement(_sebikostudioIcons.ChevronUpIcon, {
      style: {
        marginLeft: "var(--size-100)"
      }
    }) : /*#__PURE__*/_react["default"].createElement(_sebikostudioIcons.ChevronDownIcon, {
      style: {
        marginLeft: "var(--size-100)"
      }
    }) : /*#__PURE__*/_react["default"].createElement(_sebikostudioIcons.ChevronUpIcon, {
      style: {
        marginLeft: "var(--size-100)",
        visibility: "hidden"
      }
    })));
  }))), /*#__PURE__*/_react["default"].createElement("tbody", null, paginatedData.map(function (row, rowIndex) {
    var globalRowIndex = (currentPage - 1) * pageSize + rowIndex;
    return /*#__PURE__*/_react["default"].createElement("tr", {
      key: globalRowIndex,
      tabIndex: 0,
      onClick: function onClick() {
        if (multiSelect) {
          var checked = !selectedRows.has(globalRowIndex);
          handleSelectRow(checked, globalRowIndex);
        } else {
          onRowClick && onRowClick(row);
        }
      }
    }, multiSelect && /*#__PURE__*/_react["default"].createElement("td", {
      tabIndex: "0",
      style: {
        width: "26px"
      }
    }, /*#__PURE__*/_react["default"].createElement(_Checkbox["default"], {
      checked: selectedRows.has(globalRowIndex),
      onCheckedChange: function onCheckedChange(event) {
        return handleSelectRow(event.target.checked, globalRowIndex);
      }
    })), columns.map(function (column) {
      return /*#__PURE__*/_react["default"].createElement("td", {
        tabIndex: "0",
        key: column.accessor,
        style: {
          width: column.maxWidth
        }
      }, column.Cell ? column.Cell(row[column.accessor], row) : row[column.accessor]);
    }));
  }))), /*#__PURE__*/_react["default"].createElement(_Flex["default"], {
    justify: "between",
    align: "center",
    customClass: "TableFooter"
  }, multiSelect && /*#__PURE__*/_react["default"].createElement(_Flex["default"], {
    customClass: "selected-rows-count"
  }, /*#__PURE__*/_react["default"].createElement(_Paragraph["default"], null, selectedRows.size, " selected row(s).")), /*#__PURE__*/_react["default"].createElement(_Flex["default"], {
    customClass: "pagination",
    gap: 100
  }, currentPage > 1 && /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
    size: "small",
    variant: "outline",
    onClick: function onClick() {
      return handlePageChange(currentPage - 1);
    }
  }, /*#__PURE__*/_react["default"].createElement(_sebikostudioIcons.ChevronLeftIcon, null)), renderPagination(), currentPage < totalNumberOfPages && /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
    size: "small",
    variant: "outline",
    onClick: function onClick() {
      return handlePageChange(currentPage + 1);
    }
  }, /*#__PURE__*/_react["default"].createElement(_sebikostudioIcons.ChevronRightIcon, null)))));
};
var _default = exports["default"] = Table;