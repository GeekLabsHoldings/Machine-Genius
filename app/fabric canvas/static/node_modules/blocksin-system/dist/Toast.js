"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var React = _interopRequireWildcard(require("react"));
var ToastPrimitive = _interopRequireWildcard(require("@radix-ui/react-toast"));
var Progress = _interopRequireWildcard(require("@radix-ui/react-progress"));
var _Paragraph = _interopRequireDefault(require("./Paragraph"));
require("./radix-styles/Toast.scss");
require("./radix-styles/Progressbar.scss");
var _Flex = _interopRequireDefault(require("./Flex"));
var _Button = _interopRequireDefault(require("./Button"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
var Toast = function Toast(_ref) {
  var showToast = _ref.showToast,
    setShowToast = _ref.setShowToast,
    headline = _ref.headline,
    text = _ref.text,
    time = _ref.time,
    showAgain = _ref.showAgain,
    onDismissForever = _ref.onDismissForever,
    simple = _ref.simple;
  var _React$useState = React.useState(0),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    progress = _React$useState2[0],
    setProgress = _React$useState2[1];
  React.useEffect(function () {
    if (showToast) {
      setProgress(0);
      var elapsedTime = 0;
      var interval = 10; // Interval for progress update

      var timer = setInterval(function () {
        elapsedTime += interval;
        var newProgress = Math.min(elapsedTime / time * 100, 100);
        setProgress(newProgress);
        if (elapsedTime >= time) {
          clearInterval(timer);
          setTimeout(function () {
            return setShowToast(false);
          }, 100); // Hide toast after the specified time
        }
      }, interval);
      return function () {
        return clearInterval(timer);
      };
    } else {
      setProgress(0);
    }
  }, [showToast, time, setShowToast]);

  // Hide the toast when progress reaches 100%
  React.useEffect(function () {
    if (progress === 100) {
      var timeout = setTimeout(function () {
        setShowToast(false);
      }, 100); // A short delay to smoothly transition out

      return function () {
        return clearTimeout(timeout);
      };
    }
  }, [progress, setShowToast]);
  return /*#__PURE__*/React.createElement(ToastPrimitive.Provider, {
    swipeDirection: "right"
  }, /*#__PURE__*/React.createElement(ToastPrimitive.Root, {
    className: "ToastRoot ".concat(simple ? "simple" : ""),
    open: showToast
  }, /*#__PURE__*/React.createElement(_Flex["default"], {
    direction: "column",
    gap: 100
  }, !simple && /*#__PURE__*/React.createElement(ToastPrimitive.Title, {
    className: "ToastTitle"
  }, /*#__PURE__*/React.createElement(_Paragraph["default"], {
    size: "large",
    weight: "bold"
  }, headline)), /*#__PURE__*/React.createElement(ToastPrimitive.Description, {
    asChild: true
  }, /*#__PURE__*/React.createElement(_Paragraph["default"], {
    size: "large",
    weight: "regular",
    customClass: "ToastDescription"
  }, text))), showAgain && /*#__PURE__*/React.createElement(_Flex["default"], {
    direction: "column",
    gap: 100,
    style: {
      marginLeft: "auto"
    }
  }, /*#__PURE__*/React.createElement(_Button["default"], {
    size: "small",
    variant: "solid",
    onClick: onDismissForever
  }, "Don't Show Again")), /*#__PURE__*/React.createElement(Progress.Root, {
    className: "ProgressRoot",
    value: progress
  }, /*#__PURE__*/React.createElement(Progress.Indicator, {
    className: "ProgressIndicator",
    style: {
      transform: "translateX(-".concat(100 - progress, "%)")
    }
  }))), /*#__PURE__*/React.createElement(ToastPrimitive.Viewport, {
    className: "ToastViewport ".concat(simple ? "simple" : "")
  }));
};
var _default = exports["default"] = Toast;